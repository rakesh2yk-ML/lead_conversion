# -*- coding: utf-8 -*-
"""myfirst.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bBTVeEVGr8H0MtLLwFZWozMgG7OQsjeu
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder
import numpy as np

# 1. Load the raw dataset
df = pd.read_csv('study_abroad_leads_large1.csv')  # or use read_excel if you're using Excel

# 2. Drop rows where 'converted' is missing or weird
df['converted'] = df['converted'].astype(str).str.strip().str.lower()
df['converted'] = df['converted'].map({'yes': 1, 'no': 0})
df = df[df['converted'].notnull()]  # keep only valid ones

# 3. Clean 'counselling_done'
df['counselling_done'] = df['counselling_done'].astype(str).str.strip().str.lower()
df['counselling_done'] = df['counselling_done'].map({'yes': 1, 'no': 0})
df['counselling_done'].fillna(0, inplace=True)

# 4. Encode all string columns with LabelEncoder
label_cols = ['country_interest', 'program_interest', 'test_taken', 'preferred_intake', 'source']
for col in label_cols:
    if df[col].dtype == 'object':
        df[col] = df[col].astype(str).str.strip().str.lower()  # clean strings
        df[col] = LabelEncoder().fit_transform(df[col])

# 5. Fill missing test scores with 0
df['test_score'] = pd.to_numeric(df['test_score'], errors='coerce')  # just in case
df['test_score'].fillna(0, inplace=True)

# 6. Drop rows with any remaining NaNs
df.dropna(inplace=True)

# 7. Prepare features (X) and target (y)
X = df.drop(['lead_id', 'name', 'converted'], axis=1)
y = df['converted']

# 8. Final check: all numeric?
print(X.dtypes)

# 9. Train/test split and model training
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42)
lr_model = LogisticRegression()
lr_model.fit(X_train, y_train)

print("✅ Model trained successfully!")

y_pred = lr_model.predict(X_test)

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Accuracy
print("Accuracy:", accuracy_score(y_test, y_pred))

# Confusion Matrix
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

# Classification Report
print("Classification Report:\n", classification_report(y_test, y_pred))

from sklearn.ensemble import RandomForestClassifier
rf_model = RandomForestClassifier(random_state=42)
rf_model.fit(X_train, y_train)
y_pred_rf = rf_model.predict(X_test)

from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

print("Accuracy:", accuracy_score(y_test, y_pred_rf))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred_rf))
print("Classification Report:\n", classification_report(y_test, y_pred_rf))

print(y_pred_rf)
print(y_test.values)

pd.DataFrame({
    "Actual": y_test.values,
    "Predicted": y_pred_rf
}).head(10)

import matplotlib.pyplot as plt

feature_importance = rf_model.feature_importances_
features = X.columns



plt.figure(figsize=(8, 8))
plt.pie(feature_importance, labels=features, autopct='%1.1f%%', startangle=140)
plt.title("Feature Importance (Pie Chart)")
plt.tight_layout()
plt.show()

import joblib

# Save model
joblib.dump(rf_model, 'model.sav')




import streamlit as st
import pandas as pd
from prediction import predict

# Form layout
st.header("Enter lead details below:")

# Input fields
country = st.selectbox("Country Interest", ['canada', 'uk', 'usa', 'australia', 'germany'])
program = st.selectbox("Program Interest", ['ug', 'pg', 'diploma'])
test = st.selectbox("Test Taken", ['ielts', 'toefl', 'gre', 'none'])
score = st.number_input("Test Score", min_value=0.0, max_value=9.0, step=0.1)
budget = st.slider("Budget (in lakhs)", 0, 30, 10)
intake = st.selectbox("Preferred Intake", ['fall 2025', 'spring 2026', 'winter 2026'])
counselling = st.radio("Counselling Done?", ['yes', 'no'])
follow_up = st.number_input("Follow-up Count", 0, 10)
source = st.selectbox("Source", ['website', 'instagram', 'referral', 'walk-in'])

# Prepare the input as a DataFrame
input_df = pd.DataFrame([{
    'country_interest': country,
    'program_interest': program,
    'test_taken': test,
    'test_score': score,
    'budget_in_lakhs': budget,
    'preferred_intake': intake,
    'counselling_done': counselling,
    'source': source
}])

# Encode categorical features
for col in ['country_interest', 'program_interest', 'test_taken', 'preferred_intake', 'counselling_done', 'source']:
    le = LabelEncoder()
    categories = input_df[col].unique().tolist()  # Simulate consistent encoding
    le.fit(categories)
    input_df[col] = le.transform(input_df[col])

# Predict when button is clicked
if st.button("Predict Conversion"):
		prediction=predict(input_df)[0]
		st.markdown("### ✅ Prediction: Likely to Convert!" if prediction == 1 else "### ❌ Prediction: Not Likely to Convert")